(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tsparticles-engine", "./Options/Classes/Bounce"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Bouncer = void 0;
    const tsparticles_engine_1 = require("tsparticles-engine");
    const Bounce_1 = require("./Options/Classes/Bounce");
    class Bouncer extends tsparticles_engine_1.ExternalInteractorBase {
        constructor(container) {
            super(container);
            this._processBounce = (position, radius, area) => {
                const query = this.container.particles.quadTree.query(area, (p) => this.isEnabled(p));
                for (const particle of query) {
                    if (area instanceof tsparticles_engine_1.Circle) {
                        (0, tsparticles_engine_1.circleBounce)((0, tsparticles_engine_1.circleBounceDataFromParticle)(particle), {
                            position,
                            radius,
                            mass: (radius ** 2 * Math.PI) / 2,
                            velocity: tsparticles_engine_1.Vector.origin,
                            factor: tsparticles_engine_1.Vector.origin,
                        });
                    }
                    else if (area instanceof tsparticles_engine_1.Rectangle) {
                        (0, tsparticles_engine_1.rectBounce)(particle, (0, tsparticles_engine_1.calculateBounds)(position, radius));
                    }
                }
            };
            this._processMouseBounce = () => {
                const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;
                if (!radius || radius < 0 || !mousePos) {
                    return;
                }
                this._processBounce(mousePos, radius, new tsparticles_engine_1.Circle(mousePos.x, mousePos.y, radius + tolerance));
            };
            this._singleSelectorBounce = (selector, div) => {
                const container = this.container, query = document.querySelectorAll(selector);
                if (!query.length) {
                    return;
                }
                query.forEach((item) => {
                    const elem = item, pxRatio = container.retina.pixelRatio, pos = {
                        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,
                        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,
                    }, radius = (elem.offsetWidth / 2) * pxRatio, tolerance = 10 * pxRatio, area = div.type === "circle"
                        ? new tsparticles_engine_1.Circle(pos.x, pos.y, radius + tolerance)
                        : new tsparticles_engine_1.Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);
                    this._processBounce(pos, radius, area);
                });
            };
        }
        clear() {
        }
        init() {
            const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;
            if (!bounce) {
                return;
            }
            container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;
        }
        async interact() {
            const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === tsparticles_engine_1.mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;
            if (mouseMoveStatus && hoverEnabled && (0, tsparticles_engine_1.isInArray)("bounce", hoverMode)) {
                this._processMouseBounce();
            }
            else {
                (0, tsparticles_engine_1.divModeExecute)("bounce", divs, (selector, div) => this._singleSelectorBounce(selector, div));
            }
        }
        isEnabled(particle) {
            const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;
            return ((mouse.position && events.onHover.enable && (0, tsparticles_engine_1.isInArray)("bounce", events.onHover.mode)) ||
                (0, tsparticles_engine_1.isDivModeEnabled)("bounce", divs));
        }
        loadModeOptions(options, ...sources) {
            if (!options.bounce) {
                options.bounce = new Bounce_1.Bounce();
            }
            for (const source of sources) {
                options.bounce.load(source?.bounce);
            }
        }
        reset() {
        }
    }
    exports.Bouncer = Bouncer;
});
