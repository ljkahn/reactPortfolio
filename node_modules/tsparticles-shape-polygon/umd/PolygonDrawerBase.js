(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tsparticles-engine"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PolygonDrawerBase = void 0;
    const tsparticles_engine_1 = require("tsparticles-engine");
    class PolygonDrawerBase {
        draw(context, particle, radius) {
            const start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius), sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (180 * (decimalSides - 2)) / decimalSides, interiorAngle = Math.PI - (Math.PI * interiorAngleDegrees) / 180;
            if (!context) {
                return;
            }
            context.beginPath();
            context.translate(start.x, start.y);
            context.moveTo(0, 0);
            for (let i = 0; i < sideCount; i++) {
                context.lineTo(side.length, 0);
                context.translate(side.length, 0);
                context.rotate(interiorAngle);
            }
        }
        getSidesCount(particle) {
            const polygon = particle.shapeData;
            return Math.round((0, tsparticles_engine_1.getRangeValue)(polygon?.sides ?? polygon?.nb_sides ?? 5));
        }
    }
    exports.PolygonDrawerBase = PolygonDrawerBase;
});
