(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tsparticles-engine", "./Options/Classes/Slow"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Slower = void 0;
    const tsparticles_engine_1 = require("tsparticles-engine");
    const Slow_1 = require("./Options/Classes/Slow");
    class Slower extends tsparticles_engine_1.ExternalInteractorBase {
        constructor(container) {
            super(container);
        }
        clear(particle, delta, force) {
            if (particle.slow.inRange && !force) {
                return;
            }
            particle.slow.factor = 1;
        }
        init() {
            const container = this.container, slow = container.actualOptions.interactivity.modes.slow;
            if (!slow) {
                return;
            }
            container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;
        }
        async interact() {
        }
        isEnabled(particle) {
            const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;
            return events.onHover.enable && !!mouse.position && (0, tsparticles_engine_1.isInArray)("slow", events.onHover.mode);
        }
        loadModeOptions(options, ...sources) {
            if (!options.slow) {
                options.slow = new Slow_1.Slow();
            }
            for (const source of sources) {
                options.slow.load(source?.slow);
            }
        }
        reset(particle) {
            particle.slow.inRange = false;
            const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;
            if (!slowOptions || !radius || radius < 0 || !mousePos) {
                return;
            }
            const particlePos = particle.getPosition(), dist = (0, tsparticles_engine_1.getDistance)(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;
            if (dist > radius) {
                return;
            }
            slow.inRange = true;
            slow.factor = proximityFactor / slowFactor;
        }
    }
    exports.Slower = Slower;
});
